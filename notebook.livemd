# Holdings before Farm-wBNB valuedefi pool exploit

## Imports

```elixir
Mix.install([
  {:nimble_csv, "~> 1.1"},
  {:decimal, "~> 2.0"}
])

alias NimbleCSV.RFC4180, as: CSV
alias Decimal, as: D
```

## Read csv

```elixir
csv_data =
  "bsscan_txs.csv"
  |> Path.expand(__DIR__)
  |> File.read!()
  |> CSV.parse_string()
```

```elixir
Enum.count(csv_data)
```

## Filter post exploit

```elixir
epoch_datetime_filter =
  DateTime.to_unix(DateTime.from_naive!(~N[2021-05-07 10:51:00.000], "Etc/UTC"))
```

```elixir
csv_data_filtered =
  Enum.filter(csv_data, fn [_, _, epoch | _] ->
    String.to_integer(epoch) < epoch_datetime_filter
  end)
```

```elixir
Enum.count(csv_data_filtered)
```

```elixir
defmodule Parser do
  # ignore value contracts, pool and vault address 
  def run([_, _, _, _, "0x1d954998067db0074e810a85fd43e4e44a655153", _to, _]), do: []
  def run([_, _, _, _, _from, "0x1d954998067db0074e810a85fd43e4e44a655153", _]), do: []

  def run([_, _, _, _, _from, "0x7be4d5a99c903c437ec77a20cb6d0688cbb73c7f", _]), do: []
  def run([_, _, _, _, "0x7be4d5a99c903c437ec77a20cb6d0688cbb73c7f", _to, _]), do: []

  def run([_, _, _, _, _from, "0x85f94c7c3ba0841aff76c7539349816b856b3fea", _]), do: []
  def run([_, _, _, _, "0x85f94c7c3ba0841aff76c7539349816b856b3fea", _to, _]), do: []

  def run([_, _, _, _, _from, "0x8054f464902267b1ecb4c936a3bad2559058ab77", _]), do: []
  def run([_, _, _, _, "0x8054f464902267b1ecb4c936a3bad2559058ab77", _to, _]), do: []

  def run([_, _, _, _, _from, "0xd56339f80586c08b7a4e3a68678d16d37237bd96", _]), do: []
  def run([_, _, _, _, "0xd56339f80586c08b7a4e3a68678d16d37237bd96", _to, _]), do: []

  def run([_, _, _, _, "0x0000000000000000000000000000000000000000", to, quantity]) do
    # enter liquidity
    amount = D.new(quantity)
    [{to, amount}]
  end

  def run([_, _, _, _, from, "0x0000000000000000000000000000000000000000", quantity]) do
    # exit liquidity
    amount = D.new(quantity)
    [{from, D.negate(amount)}]
  end

  def run([_, _, _, _, from, to, quantity]) do
    # transfer token
    amount = D.new(quantity)
    [{from, D.negate(amount)}, {to, amount}]
  end

  def run(_), do: []
end
```

```elixir
parsed_data =
  csv_data_filtered
  |> Enum.flat_map(&Parser.run/1)
```

```elixir
grouped_by_address =
  parsed_data
  |> Enum.group_by(fn {a, _} -> a end)
```

### Calculate LP-token holdings and $FARM equivalent

```elixir
# https://bscscan.com/tx/0x640fb1cb37be3b7cf5b29d90f3b6cdec163b50a66ea954df2aa81327ba896e78
lp_token_rate = D.new("2.57213891747")

holdings =
  grouped_by_address
  |> Enum.map(fn {k, v} -> {k, Enum.reduce(v, D.new(0), fn {_, b}, acc -> D.add(acc, b) end)} end)
  |> Enum.sort_by(fn {_, v} -> v end, {:desc, Decimal})
  |> Enum.map(fn {k, v} -> [k, v, D.mult(v, lp_token_rate)] end)
  |> List.insert_at(0, ["Address", "LP-tokens", "$FARM equivalent"])
```

### Write result to file

```elixir
holdings_csv = CSV.dump_to_iodata(holdings)
```

```elixir
"holdings.csv"
|> Path.expand(__DIR__)
|> File.write!(holdings_csv)
```
